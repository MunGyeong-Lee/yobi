pipeline {
    agent any

    environment {
        # Í≥†Ï†ïÍ∞í (ÎØºÍ∞êÌïòÏßÄ ÏïäÏùÄ Í∞í)
        POSTGRES_USER = 's209'
        POSTGRES_DB = 'yobi'
        TZ = 'Asia/Seoul'
        SPRING_REDIS_HOST = 'redis'
        SPRING_REDIS_PORT = '6379'
        SPRING_REDIS_DB = '0'
        REDIS_HOST = 'redis'
        REDIS_PORT = '6379'
        REDIS_DB = '0'
        DATABASE_URL = 'postgresql://postgres:s209password@localhost:5432/S209'
        INTERNAL_AI_URL = 'http://localhost:8001/ai/analyze'
        BASE_MODEL_PATH = '/srv/models/base'
        ADAPTER_PATH = '/srv/models/mistral_lora_adapter'
        MERGED_MODEL_PATH = '/srv/models/merged'
        HF_CACHE_DIR = '/srv/models/cache'
        BATCH_MAX_WORKERS = '20'
        BATCH_MAX_CONCURRENT = '10'
        LOG_LEVEL = 'INFO'
        LOG_PATH = '/app/logs'

        # ÎØºÍ∞êÏ†ïÎ≥¥ (Jenkins CredentialsÏóêÏÑú Í∞ÄÏ†∏Ïò§Í∏∞)
        HF_TOKEN = credentials('hf_token')
        OPENAI_API_KEY = credentials('openai_api_key')
        POSTGRES_PASSWORD = credentials('postgres_password')
        SPRING_REDIS_PASSWORD = credentials('redis_password')
        REDIS_PASSWORD = credentials('redis_password')
        DOCKERHUB_USER = credentials('docker-hub-user')
        DOCKERHUB_PASS = credentials('docker-hub-pass')
    }

    stages {
        stage('Check & Download Mistral LoRA') {
            steps {
                script {
                    def modelCheck = sh(script: "[ -f ${BASE_MODEL_PATH}/config.json ] && [ -f ${ADAPTER_PATH}/adapter_model.bin ]", returnStatus: true)

                    if (modelCheck != 0) {
                        echo "üîç Î™®Îç∏Ïù¥ ÏóÜÏùå. download_models.py Ïã§Ìñâ"
                        sh """
                            export HF_TOKEN=${HF_TOKEN}
                            export BASE_MODEL_PATH=${BASE_MODEL_PATH}
                            export ADAPTER_PATH=${ADAPTER_PATH}
                            export HF_HOME=${HF_CACHE_DIR}
                            export TEST_MODEL_LOADING=true
                            python3 scripts/download_models.py
                        """
                    } else {
                        echo "‚úÖ Î™®Îç∏Ïù¥ Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï©ÎãàÎã§. Îã§Ïö¥Î°úÎìú Ïä§ÌÇµ"
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t your-dockerhub-id/ai-app:latest .'
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                sh """
                    echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
                    docker push your-dockerhub-id/ai-app:latest
                    docker logout
                """
            }
        }

        stage('Deploy to AI Server (2Î≤à ÏÑúÎ≤Ñ)') {
            steps {
                sshagent (credentials: ['ec2-2-pem-key-id']) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ubuntu@aiÎ≤àÏÑúÎ≤ÑIP '
                            docker pull your-dockerhub-id/ai-app:latest &&
                            cd /home/ubuntu/your-app-directory &&
                            docker-compose -f docker-compose.ec2-2.yml up -d
                        '
                    """
                }
            }
        }
    }
}
